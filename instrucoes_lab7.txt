//Colocar dois valores em dois registradores diferentes
0 - LD R1, 3 //0101_0001_0000000011
1 - LD R2, 8 //0101_0010_0000001000
2 - LD R3, 3 //0101_0011_0000000011
3 - LD R4, 20 //0101_0100_0000010100

//Salvar em dois endereços da ram 
4 - SW R1, (R3) //1000_0001_0011_000000
5 - SW R2, (R4) //1000_0010_0100_000000  

//Somar os dois valores no acumulador 
6 - MOV A, R1 //0110_1000_0001_000000
7 - ADD A, R2 //0010_1000_0010_000000
8 - MOV R5, A //0110_0101_1000_000000

//Escrever soma em outro endereço da ram 
9 - LD R6, 30 //0101_0110_0000011110
10 - SW R5, (R6) //1000_0101_0110_000000

//Somar acumulador com R6 (apenas pra não fazer esscrita e leitura seguidos)
11 - ADD A, R6 //0010_1000_0110_000000

//Ler soma escrita na ram
12 - LW R7, (R6) //1001_0111_0110_000000
13 - LW R2, (R3) //1001_0010_0011_000000
14 - LW R1, (R4) //1001_0001_0100_000000


    constant conteudo_rom : mem := (
        -- caso endereco => conteudo
        0  => B"0101_0001_000000000011", -- LD R1, 1
        1  => B"0101_0010_000000001000", -- LD R2, 32
        2  => B"0101_0011_000000000011", -- LD R3, 1
        3  => B"0101_0100_000000010100", 
        4  => B"1000_0001_0011_00000000",
        5  => B"1000_0010_0100_00000000",
        6  => B"0110_1000_0001_00000000",
        7  => B"0010_1000_0010_00000000",
        8  => B"0110_0101_1000_00000000",
        9  => B"0101_0110_000000011110",
        10 => B"1000_0101_0110_00000000",
        11 => B"0010_1000_0110_00000000",
        12 => B"1001_0111_0110_00000000",
        13 => B"1001_0010_0011_00000000",
        14 => B"1001_0001_0100_00000000",

        -- abaixo: casos omissos => (zero em todos os bits)
        others => (others=>'0')
    );